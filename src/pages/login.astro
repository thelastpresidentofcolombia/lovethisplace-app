---
import AuthLayout from "../layouts/AuthLayout.astro";
---

<AuthLayout title="Log In â€” LoveThisPlace">
  <div class="max-w-md mx-auto py-8">
    <h1 class="text-3xl font-bold mb-6 text-center">Welcome Back</h1>
    <form id="loginForm" class="space-y-6">
      <div>
        <label for="email" class="block text-sm font-medium">Email</label>
        <input
          type="email"
          id="email"
          required
          class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2"
        />
      </div>
      <div>
        <label for="password" class="block text-sm font-medium">Password</label>
        <input
          type="password"
          id="password"
          required
          class="mt-1 block w-full rounded-md border border-gray-300 px-3 py-2"
        />
      </div>
      <p id="errorMsg" class="text-red-500 text-sm hidden">
        Invalid email or password. Please try again.
      </p>
      <button
        type="submit"
        class="w-full bg-coral hover:bg-coral-dark text-white font-bold py-3 rounded-full transition"
      >
        Log In
      </button>
    </form>
  </div>
</AuthLayout>

<script>
  // Import the client SDKs
  import { auth } from "../lib/firebase";
  import { signInWithEmailAndPassword } from "firebase/auth";

  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("loginForm");
    const errorMsg = document.getElementById("errorMsg");

    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      errorMsg.classList.add("hidden");

      const email = (document.getElementById("email") as HTMLInputElement)
        .value;
      const password = (document.getElementById("password") as HTMLInputElement)
        .value;

      try {
        // 1. Sign in with Firebase client auth
        const userCredential = await signInWithEmailAndPassword(
          auth,
          email,
          password,
        );

        // 2. Get the ID token from the successful sign-in
        const idToken = await userCredential.user.getIdToken();

        // 3. Send the ID token to our backend to create a session cookie
        const res = await fetch("/api/auth/login", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ idToken }),
        });

        if (!res.ok) throw new Error("Could not create session.");

        // 4. Redirect on success
        window.location.href = "/dashboard";
      } catch (err) {
        console.error("Login failed:", err);
        errorMsg.classList.remove("hidden");
      }
    });
  });
</script>
